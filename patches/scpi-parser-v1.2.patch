diff --git a/libscpi/inc/scpi/parser.h b/libscpi/inc/scpi/parser.h
index 63e3ea9..2f48572 100644
--- a/libscpi/inc/scpi/parser.h
+++ b/libscpi/inc/scpi/parser.h
@@ -39,6 +39,7 @@
 
 #include "scpi/types.h"
 #include "scpi/debug.h"
+#include "types.h"
 
 #ifdef	__cplusplus
 extern "C" {
@@ -53,16 +54,25 @@ extern "C" {
 
     size_t SCPI_ResultString(scpi_t * context, const char * data);
     size_t SCPI_ResultInt(scpi_t * context, int32_t val);
+    size_t SCPI_ResultUInt(scpi_t * context, uint32_t val);
+    size_t SCPI_ResultLong(scpi_t * context, int64_t val);
+    size_t SCPI_ResultULong(scpi_t * context, uint64_t val);
     size_t SCPI_ResultDouble(scpi_t * context, double val);
     size_t SCPI_ResultText(scpi_t * context, const char * data);
     size_t SCPI_ResultBool(scpi_t * context, scpi_bool_t val);
+    size_t SCPI_ResultBufferInt16(scpi_t * context, const int16_t *data, uint32_t size);
+    size_t SCPI_ResultBufferFloat(scpi_t * context, const float *data, uint32_t size);
 
     scpi_bool_t SCPI_ParamInt(scpi_t * context, int32_t * value, scpi_bool_t mandatory);
+    scpi_bool_t SCPI_ParamUInt(scpi_t * context, uint32_t * value, scpi_bool_t mandatory);
+    scpi_bool_t SCPI_ParamLong(scpi_t * context, int64_t * value, scpi_bool_t mandatory);
+    scpi_bool_t SCPI_ParamULong(scpi_t * context, uint64_t * value, scpi_bool_t mandatory);
     scpi_bool_t SCPI_ParamDouble(scpi_t * context, double * value, scpi_bool_t mandatory);
     scpi_bool_t SCPI_ParamString(scpi_t * context, const char ** value, size_t * len, scpi_bool_t mandatory);
     scpi_bool_t SCPI_ParamText(scpi_t * context, const char ** value, size_t * len, scpi_bool_t mandatory);    
     scpi_bool_t SCPI_ParamBool(scpi_t * context, scpi_bool_t * value, scpi_bool_t mandatory);
     scpi_bool_t SCPI_ParamChoice(scpi_t * context, const char * options[], int32_t * value, scpi_bool_t mandatory);
+    size_t SCPI_ParamBufferFloat(scpi_t * context, float *data, uint32_t *size, scpi_bool_t mandatory);
 
 
 #ifdef	__cplusplus
diff --git a/libscpi/inc/scpi/types.h b/libscpi/inc/scpi/types.h
index 942b424..baa6e37 100644
--- a/libscpi/inc/scpi/types.h
+++ b/libscpi/inc/scpi/types.h
@@ -209,6 +209,7 @@ extern "C" {
         scpi_param_list_t paramlist;
         scpi_interface_t * interface;
         int_fast16_t output_count;
+        int_fast16_t output_binary_count;
         int_fast16_t input_count;
         scpi_bool_t cmd_error;
         scpi_error_queue_t error_queue;
@@ -217,6 +218,7 @@ extern "C" {
         const scpi_special_number_def_t * special_numbers;
         void * user_context;
         const char * idn[4];
+        bool binary_output;
     };
 
 #ifdef  __cplusplus
diff --git a/libscpi/inc/scpi/utils_private.h b/libscpi/inc/scpi/utils_private.h
index 230ce98..535e2a5 100644
--- a/libscpi/inc/scpi/utils_private.h
+++ b/libscpi/inc/scpi/utils_private.h
@@ -51,12 +51,14 @@ extern "C" {
     #define LOCAL
 #endif
 
+    float hton_f(float value) LOCAL;
     const char * strnpbrk(const char *str, size_t size, const char *set) LOCAL;
     scpi_bool_t compareStr(const char * str1, size_t len1, const char * str2, size_t len2) LOCAL;
     scpi_bool_t compareStrAndNum(const char * str1, size_t len1, const char * str2, size_t len2) LOCAL;
     size_t longToStr(int32_t val, char * str, size_t len) LOCAL;
     size_t doubleToStr(double val, char * str, size_t len) LOCAL;
     size_t strToLong(const char * str, int32_t * val) LOCAL;
+    size_t strToLongLong(const char * str, int64_t * val) LOCAL;
     size_t strToDouble(const char * str, double * val) LOCAL;
     scpi_bool_t locateText(const char * str1, size_t len1, const char ** str2, size_t * len2) LOCAL;
     scpi_bool_t locateStr(const char * str1, size_t len1, const char ** str2, size_t * len2) LOCAL;
diff --git a/libscpi/src/parser.c b/libscpi/src/parser.c
index 122b557..2a8d849 100644
--- a/libscpi/src/parser.c
+++ b/libscpi/src/parser.c
@@ -34,14 +34,19 @@
  * 
  */
 
-#include <ctype.h>
 #include <string.h>
+#include <sys/socket.h>
+#include <elf.h>
+#include <stdio.h>
 
 #include "scpi/config.h"
 #include "scpi/parser.h"
 #include "scpi/utils_private.h"
 #include "scpi/error.h"
 #include "scpi/constants.h"
+#include "../inc/scpi/types.h"
+#include "../inc/scpi/utils_private.h"
+#include "../inc/scpi/error.h"
 
 
 static size_t cmdTerminatorPos(const char * cmd, size_t len);
@@ -185,11 +190,47 @@ static size_t writeNewLine(scpi_t * context) {
         len = writeData(context, "\r\n", 2);
         flushData(context);
         return len;
-    } else {
-        return 0;
+    } else if (context->output_binary_count > 0) {
+        flushData(context);
+    }
+    return 0;
+}
+
+/**
+ * Writes header for binary data
+ * @param context
+ * @param numElems - number of items in the array
+ * @param sizeOfElem - size of each item [sizeof(float), sizeof(int), ...]
+ * @return number of characters written
+ */
+size_t writeBinHeader(scpi_t * context, uint32_t numElems, size_t sizeOfElem) {
+
+    size_t result = 0;
+    char numBytes[10];
+    char numOfNumBytes[2];
+
+    // Calculate number of bytes needed for all elements
+    size_t numDataBytes = numElems * sizeOfElem;
+
+    // Do not allow more than 9 character long size
+    if (numDataBytes > 999999999){
+        return result;
     }
+
+    // Convert to string and calculate string length
+    size_t len = longToStr(numDataBytes, numBytes, sizeof(numBytes));
+
+    // Convert len to sting
+    longToStr(len, numOfNumBytes, sizeof(numOfNumBytes));
+
+    result += writeData(context, "#", 1);
+    result += writeData(context, numOfNumBytes, 1);
+    result += writeData(context, numBytes, len);
+
+    return result;
 }
 
+
 /**
  * Process command
  * @param context
@@ -199,6 +240,7 @@ static void processCommand(scpi_t * context) {
 
     context->cmd_error = FALSE;
     context->output_count = 0;
+    context->output_binary_count = 0;
     context->input_count = 0;
 
     SCPI_DEBUG_COMMAND(context);
@@ -380,7 +422,43 @@ size_t SCPI_ResultString(scpi_t * context, const char * data) {
  * @return 
  */
 size_t SCPI_ResultInt(scpi_t * context, int32_t val) {
-    char buffer[12];
+    char buffer[15];
+    size_t result = 0;
+    size_t len = longToStr(val, buffer, sizeof (buffer));
+    result += writeDelimiter(context);
+    result += writeData(context, buffer, len);
+    context->output_count++;
+    return result;
+}
+
+size_t SCPI_ResultUInt(scpi_t *context, uint32_t val) {
+    char buffer[15];
+    size_t result = 0;
+    size_t len = longToStr(val, buffer, sizeof (buffer));
+    result += writeDelimiter(context);
+    result += writeData(context, buffer, len);
+    context->output_count++;
+    return result;
+}
+
+/**
+* Write long value to the result
+* @param context
+* @param val
+* @return
+*/
+size_t SCPI_ResultLong(scpi_t * context, int64_t val) {
+    char buffer[25];
+    size_t result = 0;
+    size_t len = longToStr(val, buffer, sizeof (buffer));
+    result += writeDelimiter(context);
+    result += writeData(context, buffer, len);
+    context->output_count++;
+    return result;
+}
+
+size_t SCPI_ResultULong(scpi_t *context, uint64_t val) {
+    char buffer[25];
     size_t result = 0;
     size_t len = longToStr(val, buffer, sizeof (buffer));
     result += writeDelimiter(context);
@@ -432,6 +510,105 @@ size_t SCPI_ResultText(scpi_t * context, const char * data) {
     return result;
 }
 
+size_t resultBufferInt16Bin(scpi_t * context, const int16_t *data, uint32_t size) {
+    size_t result = 0;
+
+    result += writeBinHeader(context, size, sizeof(int16_t));
+
+    if (result == 0) {
+        return result;
+    }
+
+    uint32_t i;
+    for (i = 0; i < size; i++) {
+        int16_t value = htons(data[i]);
+        result += writeData(context, (char*)(&value), sizeof(int16_t));
+    }
+    context->output_binary_count++;
+    return result;
+}
+
+size_t resultBufferInt16Ascii(scpi_t * context, const int16_t *data, uint32_t size) {
+    size_t result = 0;
+    result += writeDelimiter(context);
+    result += writeData(context, "{", 1);
+
+    uint32_t i;
+    size_t len;
+    char buffer[12];
+    for (i = 0; i < size-1; i++) {
+        len = longToStr(data[i], buffer, sizeof (buffer));
+        result += writeData(context, buffer, len);
+        result += writeData(context, ",", 1);
+    }
+    len = longToStr(data[i], buffer, sizeof (buffer));
+    result += writeData(context, buffer, len);
+    result += writeData(context, "}", 1);
+    context->output_count++;
+    return result;
+}
+
+
+size_t SCPI_ResultBufferInt16(scpi_t * context, const int16_t *data, uint32_t size) {
+
+    if (context->binary_output == true) {
+        return resultBufferInt16Bin(context, data, size);
+    }
+    else {
+        return resultBufferInt16Ascii(context, data, size);
+    }
+}
+
+size_t resultBufferFloatBin(scpi_t * context, const float *data, uint32_t size) {
+    size_t result = 0;
+
+    result += writeBinHeader(context, size, sizeof(float));
+
+    if (result == 0) {
+        return result;
+    }
+
+    uint32_t i;
+    for (i = 0; i < size; i++) {
+        float value = hton_f(data[i]);
+        result += writeData(context, (char*)(&value), sizeof(float));
+    }
+    context->output_binary_count++;
+    return result;
+}
+
+
+size_t resultBufferFloatAscii(scpi_t * context, const float *data, uint32_t size) {
+    size_t result = 0;
+    result += writeDelimiter(context);
+    result += writeData(context, "{", 1);
+
+    uint32_t i;
+    size_t len;
+    char buffer[50];
+    for (i = 0; i < size-1; i++) {
+        len = doubleToStr(data[i], buffer, sizeof (buffer));
+        result += writeData(context, buffer, len);
+        result += writeData(context, ",", 1);
+    }
+    len = doubleToStr(data[i], buffer, sizeof (buffer));
+    result += writeData(context, buffer, len);
+    result += writeData(context, "}", 1);
+    context->output_count++;
+    return result;
+}
+
+size_t SCPI_ResultBufferFloat(scpi_t * context, const float *data, uint32_t size) {
+
+    if (context->binary_output == true) {
+        return resultBufferFloatBin(context, data, size);
+    }
+    else {
+        return resultBufferFloatAscii(context, data, size);
+    }
+}
+
+
 /* parsing parameters */
 
 /**
@@ -513,6 +690,77 @@ scpi_bool_t SCPI_ParamInt(scpi_t * context, int32_t * value, scpi_bool_t mandato
     return TRUE;
 }
 
+
+scpi_bool_t SCPI_ParamUInt(scpi_t *context, uint32_t *value, scpi_bool_t mandatory) {
+    const char * param;
+    size_t param_len;
+    size_t num_len;
+
+    if (!value) {
+        return FALSE;
+    }
+
+    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
+        return FALSE;
+    }
+
+    num_len = strToLong(param, value);
+
+    if (num_len != param_len) {
+        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
+        return FALSE;
+    }
+
+    return TRUE;
+}
+
+scpi_bool_t SCPI_ParamLong(scpi_t *context, int64_t *value, scpi_bool_t mandatory) {
+    const char * param;
+    size_t param_len;
+    size_t num_len;
+
+    if (!value) {
+        return FALSE;
+    }
+
+    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
+        return FALSE;
+    }
+
+    num_len = strToLongLong(param, value);
+
+    if (num_len != param_len) {
+        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
+        return FALSE;
+    }
+
+    return TRUE;
+}
+
+scpi_bool_t SCPI_ParamULong(scpi_t *context, uint64_t *value, scpi_bool_t mandatory) {
+    const char * param;
+    size_t param_len;
+    size_t num_len;
+
+    if (!value) {
+        return FALSE;
+    }
+
+    if (!SCPI_ParamString(context, &param, &param_len, mandatory)) {
+        return FALSE;
+    }
+
+    num_len = strToLongLong(param, value);
+
+    if (num_len != param_len) {
+        SCPI_ErrorPush(context, SCPI_ERROR_SUFFIX_NOT_ALLOWED);
+        return FALSE;
+    }
+
+    return TRUE;
+}
+
+
 /**
  * Parse double parameter
  * @param context
@@ -675,6 +923,22 @@ scpi_bool_t SCPI_ParamChoice(scpi_t * context, const char * options[], int32_t *
     return FALSE;
 }
 
+
+size_t SCPI_ParamBufferFloat(scpi_t * context, float *data, uint32_t *size, scpi_bool_t mandatory) {
+    *size = 0;
+    double value;
+    while (true) {
+        if (!SCPI_ParamDouble(context, &value, mandatory)) {
+            break;
+        }
+        data[*size] = (float) value;
+        *size = *size + 1;
+        mandatory = false;          // only first is mandatory
+    }
+    return true;
+}
+
+
 scpi_bool_t SCPI_IsCmd(scpi_t * context, const char * cmd) {
     if (! context->paramlist.cmd) {
         return FALSE;
diff --git a/libscpi/src/utils.c b/libscpi/src/utils.c
index 7c0e55f..a312387 100644
--- a/libscpi/src/utils.c
+++ b/libscpi/src/utils.c
@@ -48,6 +48,20 @@ static size_t patternSeparatorPos(const char * pattern, size_t len);
 static size_t cmdSeparatorPos(const char * cmd, size_t len);
 
 /**
+ * Converts the float from host byte order to network byte order.
+ * @param value
+ * @return
+ */
+float hton_f(float value) {
+    union {float f; unsigned int  i;}val;
+
+    val.f = value;
+
+    val.i = htonl(val.i);
+    return val.f;
+};
+
+/**
  * Find the first occurrence in str of a character in set.
  * @param str
  * @param size
@@ -127,6 +141,18 @@ size_t strToLong(const char * str, int32_t * val) {
 }
 
 /**
+ * Converts string to signed 32bit integer representation
+ * @param str   string value
+ * @param val   32bit integer result
+ * @return      number of bytes used in string
+ */
+size_t strToLongLong(const char * str, int64_t * val) {
+    char * endptr;
+    *val = strtoll(str, &endptr, 0);
+    return endptr - str;
+}
+
+/**
  * Converts string to double representation
  * @param str   string value
  * @param val   double result
